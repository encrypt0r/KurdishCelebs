@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="alert alert-danger" id="error-message-container" style="display:none" role="alert">
    <span id="error-message"></span>
</div>

<div class="d-flex justify-content-center align-items-center">
    <div id="upload-container">
        <div id="drop-area" class="dm-uploader p-5 text-center h-100">
            <form asp-antiforgery="true" method="post" action="/">
                <h3 class="mb-5 text-muted">Drag and Drop Files Here</h3>
                <div class="btn btn-primary btn-block mb-5">
                    <span>Open the file Browser</span>
                    <input type="file" title="Click to add Files">
                </div>
            </form>
        </div>
    </div>

    <div id="progress-area" style="display: none;">
        <lottie-player src="/lottie/18143-discord-nearby-animation.json" background="transparent" speed="1" loop autoplay>
        </lottie-player>
        <h1 class="lead text-center">Searching...</h1>
    </div>

    <div id="result-area" style="display:none">
        <img id="result-image" class="img-fluid" />
        <br />
        <a href="/" class="btn btn-primary mt-3">Again?</a>
        <a id="download-button" href="#" class="btn btn-primary mt-3" download>Download image</a>
    </div>
</div>

<script>
    const maxMegaBytes = 5;

    window.addEventListener('load', function () {
        console.log('loaded');
        console.log($('input[name="__RequestVerificationToken"]').val());

        $("#upload-button").click(function () {
            $("#drop-area").dmUploader("start");
        });

        $("#cancel-button").click(function () {
            goToState('drop-file');
        });

        $("#drop-area").dmUploader({
            url: '/',
            //... More settings here...
            multiple: false,
            onInit: function () {
                console.log('Callback: Plugin initialized');
            },
            allowedTypes: 'image/*',
            maxFileSize: maxMegaBytes * 1024 * 1024,
            auto: false,
            onUploadProgress: setProgress,
            onUploadSuccess: uploadComplete,
            onUploadError: function (id, xhr, status, errorThrown) {
                console.log('Error! ' + errorThrown)
                showError('Error! ' + errorThrown);
            },
            onFileTypeError: function () {
                showError('Please select an image.');
            },
            onFileSizeError: function () {
                showError(`Image is too big. Maximux size is ${maxMegaBytes} MB.`);
            },
            onNewFile: function (id, file) {
                goToState('upload-progress');
                resizeAndUpload(file);
            },
            onUploadError: function (id, xhr, status, errorThrown) {
                if (xhr.status == 400) {
                    showError(`Error: ${xhr.responseJSON.message}`);
                }
                else {
                    showError(`Error: ${xhr.status}`);
                }
            },
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            }
            // ... More callbacks
        });
    })

    function resizeAndUpload(file) {
        var reader = new FileReader();
        reader.onloadend = function () {

            var tempImg = new Image();
            tempImg.src = reader.result;
            tempImg.onload = function () {

                var MAX_WIDTH = 1000;
                var MAX_HEIGHT = 1000;
                var tempW = tempImg.width;
                var tempH = tempImg.height;
                if (tempW > tempH) {
                    if (tempW > MAX_WIDTH) {
                        tempH *= MAX_WIDTH / tempW;
                        tempW = MAX_WIDTH;
                    }
                } else {
                    if (tempH > MAX_HEIGHT) {
                        tempW *= MAX_HEIGHT / tempH;
                        tempH = MAX_HEIGHT;
                    }
                }

                var canvas = document.createElement('canvas');
                canvas.width = tempW;
                canvas.height = tempH;
                var ctx = canvas.getContext("2d");
                ctx.drawImage(this, 0, 0, tempW, tempH);

                fetch('/', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({
                        image: canvas.toDataURL("image/jpeg")
                    })
                }).then(uploadComplete);
            }

        }

        reader.readAsDataURL(file);
    }

    function uploadComplete(response) {
        if (response.ok == false && response.status != 400) {
            showError('Error: ' + response.status);
        }

        response.json().then(data => {
            if (response.ok == false && response.status == 400) {
                showError(data.message);
                return;
            }

            let image = document.getElementById('result-image');
            let downloadButton = document.getElementById('download-button');

            image.setAttribute('src', data.image);
            downloadButton.setAttribute('href', data.image);

            goToState('result');
        });
    }

    function hideError() {
        let container = document.getElementById('error-message-container');
        container.style.display = 'none';
    }

    function showError(message) {
        goToState('drop-file');

        let messageSpan = document.getElementById('error-message');
        let container = document.getElementById('error-message-container');
        messageSpan.innerText = message;
        container.style.display = 'block';
    }

    function goToState(state) {
        const dropArea = document.getElementById('upload-container');
        const progressCard = document.getElementById('progress-area');
        const resultArea = document.getElementById('result-area');

        hideError();

        switch (state) {
            case 'drop-file':
                dropArea.style.display = "block";
                progressCard.style.display = "none";
                resultArea.style.display = "none";
                break;
            case 'upload-progress':
                dropArea.style.display = "none";
                progressCard.style.display = "block";
                resultArea.style.display = "none";
                break;
            case 'result':
                resultArea.style.display = "block";
                dropArea.style.display = "none";
                progressCard.style.display = "none";
            default:
        }
    }

    function setProgress(progress) {
        console.log('Progress: ' + progress);
    }
</script>